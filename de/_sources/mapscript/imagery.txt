.. index::
   pair: MapScript; Imagery

.. _ms_imagery:

.. currentmodule:: mapscript

*****************************************************************************
 MapScript Image Generation
*****************************************************************************

:Author: Sean Gillies
:Author: Seth Girvin
:Contact: sethg at geographika.co.uk
:Last Updated: 2021-05-22

.. contents:: Table of Contents
    :depth: 2
    :backlinks: top

Introduction
============

The MapScript HowTo docs are intended to complement the API reference with
examples of usage for specific subjects.  All examples in this document refer
to the Mapfile and testing layers distributed with MapServer and found in source control
under ``Mapserver/tests``.

The examples below are written in Python. All MapScript languages use the
same API, but will need to be rewritten using the relevant language's syntax.

Imagery Overview
================

The most common use of MapServer and MapScript is to create map imagery
using the built-in format drivers such as ``AGG/PNG``, ``AGG/JPEG``, and ``CAIRO/PNG``.
This imagery might be saved to a file on disk or be streamed directly to
another device.

The imageObj Class
==================

Imagery is represented in MapScript by the :class:`imageObj` class.

Creating imageObj from a mapObj
-------------------------------

The :class:`mapObj` class has two methods that return instances of :class:`imageObj`: :func:`mapObj.draw`,
and :func:`mapObj.prepareImage`. The first returns a full-fledged map image just as one
would obtain from the mapserv CGI program:

.. code-block:: python

    test_map = mapscript.mapObj('tests/test.map')
    map_image = test_map.draw()

A properly sized and formatted blank image, without any layers, symbols, or
labels, will be generated by :func:`mapObj.prepareImage`:

.. code-block:: python

    blank_image = test_map.prepareImage()

Creating a new imageObj
-----------------------

The imageObj class constructor creates new instances without need of a map:

.. code-block:: python

    format = mapscript.outputFormatObj('AGG/JPEG')
    image = mapscript.imageObj(300, 200, format)   # 300 wide, 200 high JPEG

and can even initialize from a file on disk:

.. code-block:: python

    # First three args are overridden by attributes of the disk image file
    disk_image = mapscript.imageObj(-1, -1, None, 'tests/test.png')


Image Output
============

Creating files on disk
----------------------

Imagery is saved to disk by using the 'save' method.  By accessing the
'extension' attribute of an image's format, the proper file extension
can be used without making any assumptions

.. code-block:: python

    filename = 'test.' + map_image.format.extension
    map_image.save(filename)

If the image is using a GDAL/GTiff-based format, a GeoTIFF file can be created
on disk by adding a mapObj as a second optional argument to 'save'

.. code-block:: python

    map_image.save(filename, test_map)

Direct Output
-------------

An image can be dumped to an open filehandle using the :func:`mapObj.write` method. By
default, the filehandle is 'stdout':

.. code-block:: python

    # Send an image to a web browser
    print("Content-type: " + map_image.format.mimetype + "\n\n")
    map_image.write()

This method is not fully functional for all SWIG MapScript languages. See the :ref:`SWIG API <swig>` 
reference for more details.


Images and Symbols
==================

The :func:`symbolObj.getImage` method will return an instance of :class:`imageObj`: for
pixmap symbols:

.. code-block:: python

    symbol = test_map.symbolset.getSymbolByName('home-png')
    input_format = mapscript.outputFormatObj('AGG/PNG')
    image = symbol.getImage(input_format)

There is a symmetric :func:`symbolObj.setImage` method which loads imagery into a symbol,
allowing pixmap symbols to be created dynamically:

.. code-block:: python

    new_symbol = mapscript.symbolObj('from_image')
    new_symbol.type = mapscript.MS_SYMBOL_PIXMAP
    new_symbol.setImage(image)
    index = test_map.symbolset.appendSymbol(new_symbol)
    test_map.symbolset.save('tests/output_symbols.txt')